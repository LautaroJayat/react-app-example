{"version":3,"sources":["components/Header.js","components/Search.js","components/Forecast.js","components/Citys.js","App.js","serviceWorker.js","index.js"],"names":["Header","Fragment","className","Component","Search","state","cityName","onSubmit","e","preventDefault","props","addCity","setState","target","reset","onChange","name","value","this","type","placeholder","Forecast","icon","city","weather","iconURL","_id","onClick","deleteCity","bind","description","main","temp","src","alt","coord","lon","Citys","map","key","App","console","log","fetch","then","res","json","newCity","uuid","v4","filter","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1af4a8f3.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport '../App.css';\n\nexport class Header extends Component {\n    render() {\n\n        return (\n            <React.Fragment>\n                <h1 className=\"title\">Weather Time!</h1>\n                <span className=\"wellcome\">For those who love the weather forecast...</span>\n            </React.Fragment>)\n\n\n\n\n    }\n}\nexport default Header\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport '../App.css'\n\nexport class Search extends Component {\n    state = {\n        cityName: ''\n    }\n    onSubmit = (e) => {\n        e.preventDefault();\n        this.props.addCity(this.state.cityName);\n        this.setState({ cityName: \"\" })\n        e.target.reset();\n\n    }\n    onChange = (e) => this.setState({ [e.target.name]: e.target.value });\n    render() {\n        return (\n            <React.Fragment>\n                <form onSubmit={this.onSubmit}>\n                    <input onChange={this.onChange} name=\"cityName\" type=\"text\" placeholder=\"Write a city...\"></input>\n                    <button >GO!</button>\n                </form>\n            </React.Fragment>\n        )\n    }\n}\n\nSearch.propTypes = {\n    addCity: PropTypes.func.isRequired\n}\n\nexport default Search","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nexport class Forecast extends Component {\n    //location = this.props.city.location;\n    //current = this.props.city.current;\n    render() {\n        let { icon } = this.props.city.weather[0]\n        let iconURL = `http://openweathermap.org/img/wn/${icon}@2x.png`\n        const { _id, } = this.props.city;\n        return (\n            <div className=\"cityItem\" onClick={this.props.deleteCity.bind(this, _id)}>\n                <h3>{this.props.city.name}</h3>\n                <p><strong>{this.props.city.weather[0].description}</strong>, and the temperature is {this.props.city.main.temp}Â°C</p>\n                <img src={iconURL} alt={this.props.city.coord.lon} />\n            </div>\n        )\n    }\n}\n\nForecast.propTypes = {\n    city: PropTypes.object.isRequired,\n    deleteCity: PropTypes.func.isRequired\n}\n\nexport default Forecast","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport Forecast from './Forecast'\n\nexport class Citys extends Component {\n    render() {\n        return this.props.city.map(city => (\n            <Forecast key={city._id} city={city} deleteCity={this.props.deleteCity} />\n        ))\n    }\n}\nCitys.propTypes = {\n    city: PropTypes.array.isRequired,\n    deleteCity: PropTypes.func.isRequired\n}\nexport default Citys\n","import React, { Component } from 'react';\nimport Header from './components/Header';\nimport Search from './components/Search';\nimport Citys from './components/Citys'\nimport uuid from 'uuid'\nimport './App.css'\n\nexport class App extends Component {\n  state = {\n    city: []\n  }\n  addCity = (cityName) => {\n    console.log(cityName);\n    fetch(`https://api.openweathermap.org/data/2.5/weather?q=${cityName}&APPID=df4c1079550f4c8d5d8f14a31aacf223&units=metric`)\n      .then(res => res.json())\n      .then(newCity => {\n        if (newCity.coord) {\n          newCity._id = uuid.v4();\n          this.setState({ city: [...this.state.city, newCity] });\n          console.log(this.state.city);\n        } else {\n          console.log(newCity);\n          console.log('Woops, no query pal!');\n        }\n      });\n  }\n\n  deleteCity = (_id) => {\n    this.setState({\n      city: [...this.state.city.filter(city => { return city._id !== _id })]\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Header />\n        <Search addCity={this.addCity} />\n        <Citys city={this.state.city} deleteCity={this.deleteCity} />\n\n      </div>\n\n    )\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}